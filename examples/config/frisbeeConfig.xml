

<frisbee>

	
	<connector class='frisbee.communications.MyConnector' id='Connector1'>
		
		<arg1 class='String'>argument1</arg1>
		<arg2 class='Integer'>1</arg2>

		<connection class='frisbee.communications.MyConnection' id='Connection1'>
			<arg1 class='String'>argument1</arg1>
			<arg2 class='Integer'>1</arg2>
			<verbose class='String'>WARNING</verbose> <!-- Verbosity level for standard ouptut -->
		</connection>
		

	</connector>


	<logger>
	
		<output id ='Connection1' mode='async'>
			<arg2 class='Integer'>1</arg2>
		</output>
		
		<field id ='ErrorDescription'>
			<input>
				<key class='String'>ErrorDescription</key>
			</input>
			
			<output id='Connection1'>
				<forceOuputValue class='String'>ABC</forceOuputValue>
				<length class='Integer'>32</length> 
				<lpad class='String'></lpad>
				<rpad class='String'>0</rpad>
				<header class='String'></header>
				<footer class='String'></footer>
				<key class='Integer'>1</key>
			</output>
		</field>
	
		
	</logger>
	
	<message id='TestMessage'>
	
		<input id='Connection2'  mode='sync'> <!-- async polls/listens independantly of other messages, sync waits for finish -->

			<arg1 class='String'></arg1>
			<arg2 class='String'></arg2>	
			<delim class='String'></delim> <!-- length if null -->
			<stx class='String'></stx>
			<etx class='String'></etx>
			<matchStyle class='String'>exact</matchStyle>  <!-- exact match; closest match under; closest match over-->
		</input>
		
		<output id='Connection1' mode='sync'> <!-- async sends outputs independantly, sync waits for  previous to finish -->
	
			<arg1></arg1>
			<arg2></arg2>

			
			<length class='Integer'>32</length> <!-- length without header or footer -->
			<trunk>left</trunk> <!-- strategy for fixed length -->
			<pad class='String'> </lpad>
			<rpad class='String'>0</rpad>
			<header class='String'> </header>
			<footer class='String'> </footer>
			
			
			
			<returnMessage id='r1' mode='async'>	
		
			</returnMessage> <!-- get's passed return values -->
			
			<returnMessage id='r2' mode='sync'>
			
			</returnMessage>  
				
			<followMessage mode='sync'>
				 
			</followMessage> <!-- get's passed inputs+oututs after every output-->
			
			<eotMessage>
			
			</eotMessage> <!-- get's passed inputs+outputs after all input messages are processed and trasmitted-->
		</output>
		
		<output id='2' mode='async'>
		</output>
		
		
		<field>
		
			<input id='ccc'>
				<matchOnValue class='String'>ABC</matchOnValue>
				<key class='Integer'>1</key>
				<dateformat></dateformat>
			</input>
			
			<output id='c2'>
				<forceOuputValue class='String'>ABC</forceOuputValue>
				<length class='Integer'>32</length>
				<lpad class='String'> </lpad>
				<rpad class='String'>0</rpad>
				<header class='String'> </header>
				<footer class='String'> </footer>
				<trunk>left</trunk> <!-- strategy for fixed length -->
				<type>Integer</type> <!-- change data type -->
				<key class='Integer'>1</key> <!-- two identical output keys for 2 different fields are concatenated in the order that they appear-->
				<dateformat></dateformat>
			</output>
			
			<output id='c1'>
				<forceOuputValue class='String'>ABC</forceOuputValue>
				<length class='Integer'>32</length>
				<lpad class='String'> </lpad>
				<rpad class='String'>0</rpad>
				<header class='String'> </header>
				<footer class='String'> </footer>
				<key class='Integer'>1</key>
			</output>
		
		</field>
		
		
		<field></field>
		<field></field>
		
	</message>

</frisbee>


